(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{133:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return O}));var r=a(0),n=a.n(r);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var u=n.a.createContext({}),p=function(e){var t=n.a.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return n.a.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},s=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=b(e,["components","mdxType","originalType","parentName"]),m=p(a),s=r,O=m["".concat(l,".").concat(s)]||m[s]||c[s]||i;return a?n.a.createElement(O,o(o({ref:t},u),{},{components:a})):n.a.createElement(O,o({ref:t},u))}));function O(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=s;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=a[u];return n.a.createElement.apply(null,l)}return n.a.createElement.apply(null,a)}s.displayName="MDXCreateElement"},77:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return b})),a.d(t,"Highlight",(function(){return u})),a.d(t,"default",(function(){return m}));var r=a(3),n=a(7),i=(a(0),a(133)),l={id:"air_qualityMod",title:"Air Quality Module",sidebar_label:"Air Quality Module"},o={unversionedId:"air_qualityMod",id:"air_qualityMod",isDocsHomePage:!1,title:"Air Quality Module",description:"The file shows the functions that register and request data related to the Air Quality table.",source:"@site/APIresources/data.air_quality.md",slug:"/air_qualityMod",permalink:"/APIresources/air_qualityMod",version:"current",sidebar_label:"Air Quality Module",sidebar:"APIresources",previous:{title:"Air Daily Quality Module",permalink:"/APIresources/air_daily_qualityMod"},next:{title:"Gas Inca Module",permalink:"/APIresources/gas_incaMod"}},b=[],u=function(e){var t=e.children,a=e.color;return Object(i.b)("span",{style:{backgroundColor:a,borderRadius:"2px",color:"#000000",padding:"0.2rem"}},t)},p={toc:b,Highlight:u};function m(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The file shows the functions that register and request data related to the Air Quality table."),Object(i.b)("h4",{id:"air_qualitystoreairqualitydata"},Object(i.b)(u,{color:"#b2e4f7",mdxType:"Highlight"},"air_quality.storeAirQualityData()")),Object(i.b)("p",null,"GET: lists all measurements in ppb of air quality measurement table.\nThis is an hourly average measurement."),Object(i.b)("p",null,"POST: records processed measurement and valid processed measurement every five seconds"),Object(i.b)("p",null,"Json input of Air Quality Measurement"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"name")," (",Object(i.b)("em",{parentName:"p"},"string"),") - qHAWAX name")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"interval_hours")," (",Object(i.b)("em",{parentName:"p"},"integer"),") - the last N hours we want it"))),Object(i.b)("h4",{id:"air_qualitygetairqualitymeasurementstimeperiod"},Object(i.b)(u,{color:"#b2e4f7",mdxType:"Highlight"},"air_quality.getAirQualityMeasurementsTimePeriod()")),Object(i.b)("p",null,"Lists all measurements in ppb of air quality measurement table in a defined period of time. This is an hourly average measurement."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"name")," (",Object(i.b)("em",{parentName:"p"},"string"),") - qHAWAX name")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"initial_timestamp")," (",Object(i.b)("em",{parentName:"p"},"timestamp without timezone"),") - timestamp day-month-year hour:minute:second (UTC OO)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"final_timestamp")," (",Object(i.b)("em",{parentName:"p"},"timestamp without timezone"),") - timestamp day-month-year hour:minute:second (UTC OO)"))),Object(i.b)("h4",{id:"air_qualitygetgasaveragemeasurementsevery24"},Object(i.b)(u,{color:"#b2e4f7",mdxType:"Highlight"},"air_quality.getGasAverageMeasurementsEvery24()")),Object(i.b)("p",null,"Lists all values by a defined gas or dust in ug/m3 of air quality measurement table of the last 24 hours."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"qhawax")," (",Object(i.b)("em",{parentName:"p"},"string"),") - qHAWAX name")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"gas")," (",Object(i.b)("em",{parentName:"p"},"string"),") - gas or dust name (CO,H2S,O3,NO2,SO2,PM25,PM10)"))),Object(i.b)("h4",{id:"air_qualitygetaveragevalidprocessedmeasurementstimeperiod"},Object(i.b)(u,{color:"#b2e4f7",mdxType:"Highlight"},"air_quality.getAverageValidProcessedMeasurementsTimePeriod()")),Object(i.b)("p",null,"Lists all average measurements of valid processed measurement table in a defined period of time and company."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Parameters:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"qhawax_id")," (",Object(i.b)("em",{parentName:"p"},"integer"),") - qHAWAX ID")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"initial_timestamp")," (",Object(i.b)("em",{parentName:"p"},"timestamp without timezone"),") - timestamp day-month-year hour:minute:second (UTC OO)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"final_timestamp")," (",Object(i.b)("em",{parentName:"p"},"timestamp without timezone"),") - timestamp day-month-year hour:minute:second (UTC OO)"))))}m.isMDXComponent=!0}}]);